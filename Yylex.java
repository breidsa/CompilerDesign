// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: toy.l

import java.io.FileReader;
import java.io.FileNotFoundException;
import java.io.IOException;

class Yytoken {
  public String type;
  public Object value;
  public Yytoken(String type) {
    this.type = type;
  }
  public Yytoken(String type, Object value) {
    this.type = type;
    this.value = value;
  }
}


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Yylex {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int INT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000"+
    "\1\u5100\3\u0100\1\u5200\1\u5300\1\u5400\12\u1f00\4\u0100\1\u5500"+
    "\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800\2\u1f00"+
    "\1\u5900\1\u5a00\27\u0100\1\u5b00\4\u0100\1\u5c00\1\u5d00\42\u1f00"+
    "\1\u0100\1\u5e00\1\u5f00\11\u1f00\1\u6000\24\u1f00\1\u6100\1\u6200"+
    "\1\u1f00\1\u6300\1\u6400\1\u6500\1\u6600\2\u1f00\1\u6700\5\u1f00"+
    "\1\u6800\1\u6900\1\u6a00\5\u1f00\1\u6b00\1\u6c00\2\u1f00\1\u6d00"+
    "\1\u1f00\1\u6e00\14\u1f00\1\u6f00\4\u1f00\246\u0100\1\u7000\20\u0100"+
    "\1\u7100\1\u7200\25\u0100\1\u7300\34\u0100\1\u7400\14\u1f00\2\u0100"+
    "\1\u7500\5\u1f00\23\u0100\1\u7600\u0aec\u1f00\1\u7700\1\u7800\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\1\0\10\1\1\2\1\3\1\4\1\5\1\6\16\1"+
    "\4\4\1\5\1\7\1\10\1\11\1\12\3\4\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\12\23"+
    "\1\4\1\24\1\25\1\26\1\27\2\4\32\30\1\4"+
    "\1\31\2\4\1\12\1\4\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\2\30\1\43\1\44"+
    "\1\45\1\46\1\47\1\30\1\50\1\51\1\52\1\53"+
    "\1\54\4\30\1\55\1\4\1\56\1\4\41\1\2\4"+
    "\4\12\4\4\1\12\2\4\1\1\7\4\1\12\4\4"+
    "\1\12\5\4\27\12\1\4\37\12\1\4\u01ca\12\4\4"+
    "\14\12\16\4\5\12\7\4\1\12\1\4\1\12\21\4"+
    "\160\1\5\12\1\4\2\12\2\4\4\12\1\4\1\12"+
    "\6\4\1\12\1\4\3\12\1\4\1\12\1\4\24\12"+
    "\1\4\123\12\1\4\213\12\1\4\5\1\2\4\246\12"+
    "\1\4\46\12\2\4\1\12\6\4\51\12\6\4\1\12"+
    "\1\4\55\1\1\4\1\1\1\4\2\1\1\4\2\1"+
    "\1\4\1\1\10\4\33\12\4\4\4\12\15\4\6\1"+
    "\5\4\1\12\4\4\13\1\1\4\1\1\3\4\53\12"+
    "\37\1\4\4\2\12\1\1\143\12\1\4\1\12\10\1"+
    "\1\4\6\1\2\12\2\1\1\4\4\1\2\12\12\1"+
    "\3\12\2\4\1\12\17\4\1\1\1\12\1\1\36\12"+
    "\33\1\2\4\131\12\13\1\1\12\16\4\12\1\41\12"+
    "\11\1\2\12\4\4\1\12\2\4\1\1\30\12\4\1"+
    "\1\12\11\1\1\12\3\1\1\12\5\1\22\4\31\12"+
    "\3\1\4\4\13\12\65\4\25\12\1\4\22\12\13\4"+
    "\61\1\66\12\3\1\1\12\22\1\1\12\7\1\12\12"+
    "\2\1\2\4\12\1\1\4\20\12\3\1\1\4\10\12"+
    "\2\4\2\12\2\4\26\12\1\4\7\12\1\4\1\12"+
    "\3\4\4\12\2\4\1\1\1\12\7\1\2\4\2\1"+
    "\2\4\3\1\1\12\10\4\1\1\4\4\2\12\1\4"+
    "\3\12\2\1\2\4\12\1\4\12\7\4\2\12\1\4"+
    "\1\1\2\4\3\1\1\4\6\12\4\4\2\12\2\4"+
    "\26\12\1\4\7\12\1\4\2\12\1\4\2\12\1\4"+
    "\2\12\2\4\1\1\1\4\5\1\4\4\2\1\2\4"+
    "\3\1\3\4\1\1\7\4\4\12\1\4\1\12\7\4"+
    "\14\1\3\12\1\1\13\4\3\1\1\4\11\12\1\4"+
    "\3\12\1\4\26\12\1\4\7\12\1\4\2\12\1\4"+
    "\5\12\2\4\1\1\1\12\10\1\1\4\3\1\1\4"+
    "\3\1\2\4\1\12\17\4\2\12\2\1\2\4\12\1"+
    "\1\4\1\12\7\4\1\12\6\1\1\4\3\1\1\4"+
    "\10\12\2\4\2\12\2\4\26\12\1\4\7\12\1\4"+
    "\2\12\1\4\5\12\2\4\1\1\1\12\7\1\2\4"+
    "\2\1\2\4\3\1\7\4\3\1\4\4\2\12\1\4"+
    "\3\12\2\1\2\4\12\1\1\4\1\12\20\4\1\1"+
    "\1\12\1\4\6\12\3\4\3\12\1\4\4\12\3\4"+
    "\2\12\1\4\1\12\1\4\2\12\3\4\2\12\3\4"+
    "\3\12\3\4\14\12\4\4\5\1\3\4\3\1\1\4"+
    "\4\1\2\4\1\12\6\4\1\1\16\4\12\1\11\4"+
    "\1\12\6\4\5\1\10\12\1\4\3\12\1\4\27\12"+
    "\1\4\20\12\3\4\1\12\7\1\1\4\3\1\1\4"+
    "\4\1\7\4\2\1\1\4\3\12\5\4\2\12\2\1"+
    "\2\4\12\1\20\4\1\12\3\1\1\4\10\12\1\4"+
    "\3\12\1\4\27\12\1\4\12\12\1\4\5\12\2\4"+
    "\1\1\1\12\7\1\1\4\3\1\1\4\4\1\7\4"+
    "\2\1\7\4\1\12\1\4\2\12\2\1\2\4\12\1"+
    "\1\4\2\12\15\4\4\1\11\12\1\4\3\12\1\4"+
    "\51\12\2\1\1\12\7\1\1\4\3\1\1\4\4\1"+
    "\1\12\5\4\3\12\1\1\7\4\3\12\2\1\2\4"+
    "\12\1\12\4\6\12\1\4\3\1\1\4\22\12\3\4"+
    "\30\12\1\4\11\12\1\4\1\12\2\4\7\12\3\4"+
    "\1\1\4\4\6\1\1\4\1\1\1\4\10\1\6\4"+
    "\12\1\2\4\2\1\15\4\60\12\1\1\2\12\7\1"+
    "\4\4\10\12\10\1\1\4\12\1\47\4\2\12\1\4"+
    "\1\12\1\4\5\12\1\4\30\12\1\4\1\12\1\4"+
    "\12\12\1\1\2\12\11\1\1\12\2\4\5\12\1\4"+
    "\1\12\1\4\6\1\2\4\12\1\2\4\4\12\40\4"+
    "\1\12\27\4\2\1\6\4\12\1\13\4\1\1\1\4"+
    "\1\1\1\4\1\1\4\4\2\1\10\12\1\4\44\12"+
    "\4\4\24\1\1\4\2\1\5\12\13\1\1\4\44\1"+
    "\11\4\1\1\71\4\53\12\24\1\1\12\12\1\6\4"+
    "\6\12\4\1\4\12\3\1\1\12\3\1\2\12\7\1"+
    "\3\12\4\1\15\12\14\1\1\12\17\1\2\4\46\12"+
    "\1\4\1\12\5\4\1\12\2\4\53\12\1\4\115\12"+
    "\1\4\4\12\2\4\7\12\1\4\1\12\1\4\4\12"+
    "\2\4\51\12\1\4\4\12\2\4\41\12\1\4\4\12"+
    "\2\4\7\12\1\4\1\12\1\4\4\12\2\4\17\12"+
    "\1\4\71\12\1\4\4\12\2\4\103\12\2\4\3\1"+
    "\40\4\20\12\20\4\126\12\2\4\6\12\3\4\u016c\12"+
    "\2\4\21\12\1\4\32\12\5\4\113\12\3\4\13\12"+
    "\7\4\15\12\1\4\4\12\3\1\13\4\22\12\3\1"+
    "\13\4\22\12\2\1\14\4\15\12\1\4\3\12\1\4"+
    "\2\1\14\4\64\12\40\1\3\4\1\12\3\4\2\12"+
    "\1\1\2\4\12\1\41\4\4\1\1\4\12\1\6\4"+
    "\131\12\7\4\5\12\2\1\42\12\1\1\1\12\5\4"+
    "\106\12\12\4\37\12\1\4\14\1\4\4\14\1\12\4"+
    "\12\1\36\12\2\4\5\12\13\4\54\12\4\4\32\12"+
    "\6\4\12\1\46\4\27\12\5\1\4\4\65\12\12\1"+
    "\1\4\35\1\2\4\13\1\6\4\12\1\15\4\1\12"+
    "\10\4\16\1\1\4\2\1\77\4\5\1\57\12\21\1"+
    "\7\12\4\4\12\1\21\4\11\1\14\4\3\1\36\12"+
    "\15\1\2\12\12\1\54\12\16\1\14\4\44\12\24\1"+
    "\10\4\12\1\3\4\3\12\12\1\44\12\2\4\11\12"+
    "\7\4\53\12\2\4\3\12\20\4\3\1\1\4\25\1"+
    "\4\12\1\1\6\12\1\1\2\12\3\1\1\12\5\4"+
    "\300\12\72\1\1\4\5\1\26\12\2\4\6\12\2\4"+
    "\46\12\2\4\6\12\2\4\10\12\1\4\1\12\1\4"+
    "\1\12\1\4\1\12\1\4\37\12\2\4\65\12\1\4"+
    "\7\12\1\4\1\12\3\4\3\12\1\4\7\12\3\4"+
    "\4\12\2\4\6\12\4\4\15\12\5\4\3\12\1\4"+
    "\7\12\16\4\5\1\32\4\5\1\20\4\2\12\23\4"+
    "\1\12\13\4\5\1\1\4\12\1\1\4\1\12\15\4"+
    "\1\12\20\4\15\12\3\4\40\12\20\4\15\1\4\4"+
    "\1\1\3\4\14\1\21\4\1\12\4\4\1\12\2\4"+
    "\12\12\1\4\1\12\3\4\5\12\6\4\1\12\1\4"+
    "\1\12\1\4\1\12\1\4\4\12\1\4\13\12\2\4"+
    "\4\12\5\4\5\12\4\4\1\12\21\4\51\12\u0177\4"+
    "\57\12\1\4\57\12\1\4\205\12\6\4\4\12\3\1"+
    "\2\12\14\4\46\12\1\4\1\12\5\4\1\12\2\4"+
    "\70\12\7\4\1\12\17\4\1\1\27\12\11\4\7\12"+
    "\1\4\7\12\1\4\7\12\1\4\7\12\1\4\7\12"+
    "\1\4\7\12\1\4\7\12\1\4\7\12\1\4\40\1"+
    "\57\4\1\12\325\4\3\12\31\4\11\12\6\1\1\4"+
    "\5\12\2\4\5\12\4\4\126\12\2\4\2\1\2\4"+
    "\3\12\1\4\132\12\1\4\4\12\5\4\53\12\1\4"+
    "\136\12\21\4\40\12\60\4\320\12\100\4\375\12\3\4"+
    "\215\12\103\4\56\12\2\4\15\12\3\4\20\12\12\1"+
    "\2\12\24\4\57\12\1\1\4\4\12\1\1\4\37\12"+
    "\2\1\120\12\2\1\45\4\11\12\2\4\147\12\2\4"+
    "\65\12\2\4\11\12\52\4\15\12\1\1\3\12\1\1"+
    "\4\12\1\1\27\12\5\1\4\4\1\1\13\4\1\12"+
    "\7\4\64\12\14\4\2\1\62\12\22\1\12\4\12\1"+
    "\6\4\22\1\6\12\3\4\1\12\1\4\2\12\13\1"+
    "\34\12\10\1\2\4\27\12\15\1\14\4\35\12\3\4"+
    "\4\1\57\12\16\1\16\4\1\12\12\1\6\4\5\12"+
    "\1\1\12\12\12\1\5\12\1\4\51\12\16\1\11\4"+
    "\3\12\1\1\10\12\2\1\2\4\12\1\6\4\27\12"+
    "\3\4\1\12\3\1\62\12\1\1\1\12\3\1\2\12"+
    "\2\1\5\12\2\1\1\12\1\1\1\12\30\4\3\12"+
    "\2\4\13\12\5\1\2\4\3\12\2\1\12\4\6\12"+
    "\2\4\6\12\2\4\6\12\11\4\7\12\1\4\7\12"+
    "\1\4\53\12\1\4\16\12\6\4\163\12\10\1\1\4"+
    "\2\1\2\4\12\1\6\4\244\12\14\4\27\12\4\4"+
    "\61\12\4\4\156\12\2\4\152\12\46\4\7\12\14\4"+
    "\5\12\5\4\1\12\1\1\12\12\1\4\15\12\1\4"+
    "\5\12\1\4\1\12\1\4\2\12\1\4\2\12\1\4"+
    "\154\12\41\4\153\12\22\4\100\12\2\4\66\12\50\4"+
    "\15\12\3\4\20\1\20\4\20\1\3\4\2\12\30\4"+
    "\3\12\31\4\1\12\6\4\5\12\1\4\207\12\2\4"+
    "\1\1\4\4\1\12\13\4\12\1\7\4\32\12\4\4"+
    "\1\12\1\4\32\12\13\4\131\12\3\4\6\12\2\4"+
    "\6\12\2\4\6\12\2\4\3\12\3\4\2\12\3\4"+
    "\2\12\22\4\3\1\4\4\14\12\1\4\32\12\1\4"+
    "\23\12\1\4\2\12\1\4\17\12\2\4\16\12\42\4"+
    "\173\12\105\4\65\12\210\4\1\1\202\4\35\12\3\4"+
    "\61\12\17\4\1\1\37\4\40\12\15\4\36\12\5\4"+
    "\46\12\5\1\5\4\36\12\2\4\44\12\4\4\10\12"+
    "\1\4\5\12\52\4\236\12\2\4\12\1\6\4\44\12"+
    "\4\4\44\12\4\4\50\12\10\4\64\12\234\4\67\12"+
    "\11\4\26\12\12\4\10\12\230\4\6\12\2\4\1\12"+
    "\1\4\54\12\1\4\2\12\3\4\1\12\2\4\27\12"+
    "\12\4\27\12\11\4\37\12\101\4\23\12\1\4\2\12"+
    "\12\4\26\12\12\4\32\12\106\4\70\12\6\4\2\12"+
    "\100\4\1\12\3\1\1\4\2\1\5\4\4\1\4\12"+
    "\1\4\3\12\1\4\35\12\2\4\3\1\4\4\1\1"+
    "\40\4\35\12\3\4\35\12\43\4\10\12\1\4\34\12"+
    "\2\1\31\4\66\12\12\4\26\12\12\4\23\12\15\4"+
    "\22\12\156\4\111\12\67\4\63\12\15\4\63\12\15\4"+
    "\44\12\4\1\10\4\12\1\u0146\4\52\12\1\4\2\1"+
    "\3\4\2\12\116\4\35\12\12\4\1\12\10\4\26\12"+
    "\13\1\137\4\25\12\33\4\27\12\11\4\3\1\65\12"+
    "\17\1\37\4\12\1\17\4\4\1\55\12\13\1\2\4"+
    "\1\1\17\4\1\1\2\4\31\12\7\4\12\1\6\4"+
    "\3\1\44\12\16\1\1\4\12\1\4\4\1\12\2\1"+
    "\1\12\10\4\43\12\1\1\2\4\1\12\11\4\3\1"+
    "\60\12\16\1\4\12\4\4\4\1\1\4\14\1\1\12"+
    "\1\4\1\12\43\4\22\12\1\4\31\12\14\1\6\4"+
    "\1\1\101\4\7\12\1\4\1\12\1\4\4\12\1\4"+
    "\17\12\1\4\12\12\7\4\57\12\14\1\5\4\12\1"+
    "\6\4\4\1\1\4\10\12\2\4\2\12\2\4\26\12"+
    "\1\4\7\12\1\4\2\12\1\4\5\12\1\4\2\1"+
    "\1\12\7\1\2\4\2\1\2\4\3\1\2\4\1\12"+
    "\6\4\1\1\5\4\5\12\2\1\2\4\7\1\3\4"+
    "\5\1\213\4\65\12\22\1\4\12\5\4\12\1\4\4"+
    "\1\1\3\12\36\4\60\12\24\1\2\12\1\4\1\12"+
    "\10\4\12\1\246\4\57\12\7\1\2\4\11\1\27\4"+
    "\4\12\2\1\42\4\60\12\21\1\3\4\1\12\13\4"+
    "\12\1\46\4\53\12\15\1\1\12\7\4\12\1\66\4"+
    "\33\12\2\4\17\1\4\4\12\1\306\4\54\12\17\1"+
    "\145\4\100\12\12\1\25\4\10\12\2\4\1\12\2\4"+
    "\10\12\1\4\2\12\1\4\30\12\6\1\1\4\2\1"+
    "\2\4\4\1\1\12\1\1\1\12\2\1\14\4\12\1"+
    "\106\4\10\12\2\4\47\12\7\1\2\4\7\1\1\12"+
    "\1\4\1\12\1\1\33\4\1\12\12\1\50\12\7\1"+
    "\1\12\4\1\10\4\1\1\10\4\1\12\13\1\56\12"+
    "\20\1\3\4\1\12\42\4\71\12\7\4\11\12\1\4"+
    "\45\12\10\1\1\4\10\1\1\12\17\4\12\1\30\4"+
    "\36\12\2\4\26\1\1\4\16\1\111\4\7\12\1\4"+
    "\2\12\1\4\46\12\6\1\3\4\1\1\1\4\2\1"+
    "\1\4\7\1\1\12\1\1\10\4\12\1\6\4\6\12"+
    "\1\4\2\12\1\4\40\12\5\1\1\4\2\1\1\4"+
    "\5\1\1\12\7\4\12\1\u0136\4\23\12\4\1\271\4"+
    "\1\12\54\4\4\12\37\4\232\12\146\4\157\12\21\4"+
    "\304\12\274\4\57\12\1\4\11\1\307\4\107\12\271\4"+
    "\71\12\7\4\37\12\1\4\12\1\146\4\36\12\2\4"+
    "\5\1\13\4\60\12\7\1\11\4\4\12\14\4\12\1"+
    "\11\4\25\12\5\4\23\12\260\4\100\12\200\4\113\12"+
    "\4\4\1\1\1\12\67\1\7\4\4\1\15\12\100\4"+
    "\2\12\1\4\1\12\1\1\13\4\2\1\16\4\370\12"+
    "\10\4\326\12\52\4\11\12\367\4\37\12\61\4\3\12"+
    "\21\4\4\12\10\4\u018c\12\4\4\153\12\5\4\15\12"+
    "\3\4\11\12\7\4\12\12\3\4\2\1\1\4\4\1"+
    "\301\4\5\1\3\4\26\1\2\4\7\1\36\4\4\1"+
    "\224\4\3\1\273\4\125\12\1\4\107\12\1\4\2\12"+
    "\2\4\1\12\2\4\2\12\2\4\4\12\1\4\14\12"+
    "\1\4\1\12\1\4\7\12\1\4\101\12\1\4\4\12"+
    "\2\4\10\12\1\4\7\12\1\4\34\12\1\4\4\12"+
    "\1\4\5\12\1\4\1\12\3\4\7\12\1\4\u0154\12"+
    "\2\4\31\12\1\4\31\12\1\4\37\12\1\4\31\12"+
    "\1\4\37\12\1\4\31\12\1\4\37\12\1\4\31\12"+
    "\1\4\37\12\1\4\31\12\1\4\10\12\2\4\151\1"+
    "\4\4\62\1\10\4\1\1\16\4\1\1\26\4\5\1"+
    "\1\4\17\1\120\4\7\1\1\4\21\1\2\4\7\1"+
    "\1\4\2\1\1\4\5\1\325\4\55\12\3\4\7\1"+
    "\7\12\2\4\12\1\4\4\1\12\u0171\4\54\12\16\1"+
    "\5\4\306\12\13\4\7\1\51\4\104\12\7\1\1\12"+
    "\4\4\12\1\u0156\4\1\12\117\4\4\12\1\4\33\12"+
    "\1\4\2\12\1\4\1\12\2\4\1\12\1\4\12\12"+
    "\1\4\4\12\1\4\1\12\1\4\1\12\6\4\1\12"+
    "\4\4\1\12\1\4\1\12\1\4\1\12\1\4\3\12"+
    "\1\4\2\12\1\4\1\12\2\4\1\12\1\4\1\12"+
    "\1\4\1\12\1\4\1\12\1\4\1\12\1\4\2\12"+
    "\1\4\1\12\2\4\4\12\1\4\7\12\1\4\4\12"+
    "\1\4\4\12\1\4\1\12\1\4\12\12\1\4\21\12"+
    "\5\4\3\12\1\4\5\12\1\4\21\12\u0134\4\12\1"+
    "\6\4\336\12\42\4\65\12\13\4\336\12\2\4\u0182\12"+
    "\16\4\u0131\12\37\4\36\12\342\4\113\12\266\4\1\1"+
    "\36\4\140\1\200\4\360\1\20\4";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30976];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\14\5\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\0\1\31\1\0\1\32\1\33"+
    "\1\34\5\5\1\35\2\5\1\36\6\5\1\37\1\40"+
    "\1\41\1\42\2\43\1\44\3\5\1\45\1\46\1\47"+
    "\6\5\1\50\1\51\5\5\1\52\1\53\1\54\1\55"+
    "\4\5\1\56\1\57\1\60\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\136\0\136\0\215\0\274\0\136"+
    "\0\353\0\u011a\0\136\0\136\0\136\0\136\0\136\0\136"+
    "\0\136\0\u0149\0\u0178\0\136\0\u01a7\0\u01d6\0\u0205\0\u0234"+
    "\0\u0263\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac"+
    "\0\u03db\0\u040a\0\u0439\0\136\0\136\0\136\0\136\0\136"+
    "\0\136\0\u0468\0\136\0\u0497\0\136\0\136\0\136\0\u04c6"+
    "\0\u04f5\0\u0524\0\u0553\0\u0582\0\u011a\0\u05b1\0\u05e0\0\u011a"+
    "\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa\0\136\0\136"+
    "\0\136\0\136\0\136\0\u0729\0\u011a\0\u0758\0\u0787\0\u07b6"+
    "\0\u011a\0\u011a\0\u011a\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1"+
    "\0\u08d0\0\u011a\0\u011a\0\u08ff\0\u092e\0\u095d\0\u098c\0\u09bb"+
    "\0\u011a\0\u011a\0\u011a\0\u011a\0\u09ea\0\u0a19\0\u0a48\0\u0a77"+
    "\0\u011a\0\u011a\0\u011a\0\u011a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\4\2\5\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\12\1\4"+
    "\1\30\1\31\2\12\1\32\1\33\2\12\1\34\1\12"+
    "\1\35\1\12\1\36\1\37\1\40\1\41\1\42\1\12"+
    "\1\43\1\44\1\45\1\46\2\0\1\47\4\0\1\50"+
    "\12\0\1\51\4\0\1\51\1\52\23\51\64\0\1\5"+
    "\101\0\1\53\41\0\1\54\45\0\2\12\10\0\1\12"+
    "\10\0\1\12\4\0\1\12\1\0\23\12\24\0\1\54"+
    "\57\0\1\23\61\0\1\55\56\0\1\56\56\0\1\57"+
    "\30\0\2\12\10\0\1\12\10\0\1\12\4\0\1\12"+
    "\1\0\13\12\1\60\7\12\2\0\2\12\10\0\1\12"+
    "\10\0\1\12\4\0\1\12\1\0\14\12\1\61\6\12"+
    "\2\0\2\12\10\0\1\12\10\0\1\12\4\0\1\12"+
    "\1\0\11\12\1\62\11\12\2\0\2\12\10\0\1\12"+
    "\10\0\1\12\4\0\1\12\1\0\1\63\13\12\1\64"+
    "\6\12\2\0\2\12\10\0\1\12\10\0\1\12\4\0"+
    "\1\12\1\0\5\12\1\65\5\12\1\66\7\12\2\0"+
    "\2\12\10\0\1\12\10\0\1\12\4\0\1\12\1\0"+
    "\14\12\1\67\6\12\2\0\2\12\10\0\1\12\10\0"+
    "\1\12\4\0\1\12\1\0\16\12\1\70\4\12\2\0"+
    "\2\12\10\0\1\12\10\0\1\12\4\0\1\12\1\0"+
    "\16\12\1\71\4\12\2\0\2\12\10\0\1\12\10\0"+
    "\1\12\4\0\1\12\1\0\4\12\1\72\16\12\2\0"+
    "\2\12\10\0\1\12\10\0\1\12\4\0\1\12\1\0"+
    "\20\12\1\73\2\12\2\0\2\12\10\0\1\12\10\0"+
    "\1\12\4\0\1\12\1\0\7\12\1\74\6\12\1\75"+
    "\4\12\2\0\2\12\10\0\1\12\10\0\1\12\4\0"+
    "\1\12\1\0\14\12\1\76\6\12\4\0\1\77\1\100"+
    "\2\0\1\101\1\0\1\102\46\0\3\54\1\103\2\54"+
    "\1\104\50\54\2\12\10\0\1\12\10\0\1\12\4\0"+
    "\1\12\1\0\3\12\1\105\17\12\2\0\2\12\10\0"+
    "\1\12\10\0\1\12\4\0\1\12\1\0\14\12\1\106"+
    "\6\12\2\0\2\12\10\0\1\12\10\0\1\12\4\0"+
    "\1\12\1\0\17\12\1\107\3\12\2\0\2\12\10\0"+
    "\1\12\10\0\1\12\4\0\1\12\1\0\11\12\1\110"+
    "\11\12\2\0\2\12\10\0\1\12\10\0\1\12\4\0"+
    "\1\12\1\0\16\12\1\111\4\12\2\0\2\12\10\0"+
    "\1\12\10\0\1\12\4\0\1\12\1\0\20\12\1\112"+
    "\2\12\2\0\2\12\10\0\1\12\10\0\1\12\4\0"+
    "\1\12\1\0\3\12\1\113\17\12\2\0\2\12\10\0"+
    "\1\12\10\0\1\12\4\0\1\12\1\0\10\12\1\114"+
    "\12\12\2\0\2\12\10\0\1\12\10\0\1\12\4\0"+
    "\1\12\1\0\20\12\1\115\2\12\2\0\2\12\10\0"+
    "\1\12\10\0\1\12\4\0\1\12\1\0\16\12\1\116"+
    "\4\12\2\0\2\12\10\0\1\12\10\0\1\12\4\0"+
    "\1\12\1\0\4\12\1\117\16\12\2\0\2\12\10\0"+
    "\1\12\10\0\1\12\4\0\1\12\1\0\21\12\1\120"+
    "\1\12\2\0\2\12\10\0\1\12\10\0\1\12\4\0"+
    "\1\12\1\0\10\12\1\121\12\12\5\0\1\103\53\0"+
    "\2\12\10\0\1\12\10\0\1\12\4\0\1\12\1\0"+
    "\11\12\1\122\11\12\2\0\2\12\10\0\1\12\10\0"+
    "\1\12\4\0\1\12\1\0\4\12\1\123\16\12\2\0"+
    "\2\12\10\0\1\12\10\0\1\12\4\0\1\12\1\0"+
    "\17\12\1\124\3\12\2\0\2\12\10\0\1\12\10\0"+
    "\1\12\4\0\1\12\1\0\13\12\1\125\7\12\2\0"+
    "\2\12\10\0\1\12\10\0\1\12\4\0\1\12\1\0"+
    "\21\12\1\126\1\12\2\0\2\12\10\0\1\12\10\0"+
    "\1\12\4\0\1\12\1\0\10\12\1\127\10\12\1\130"+
    "\1\12\2\0\2\12\10\0\1\12\10\0\1\12\4\0"+
    "\1\12\1\0\13\12\1\131\7\12\2\0\2\12\10\0"+
    "\1\12\10\0\1\12\4\0\1\12\1\0\4\12\1\132"+
    "\16\12\2\0\2\12\10\0\1\12\10\0\1\12\4\0"+
    "\1\12\1\0\3\12\1\133\17\12\2\0\2\12\10\0"+
    "\1\12\10\0\1\12\4\0\1\12\1\0\4\12\1\134"+
    "\16\12\2\0\2\12\10\0\1\12\10\0\1\12\4\0"+
    "\1\12\1\0\20\12\1\135\2\12\2\0\2\12\10\0"+
    "\1\12\10\0\1\12\4\0\1\12\1\0\16\12\1\136"+
    "\4\12\2\0\2\12\10\0\1\12\10\0\1\12\4\0"+
    "\1\12\1\0\13\12\1\137\7\12\2\0\2\12\10\0"+
    "\1\12\10\0\1\12\4\0\1\12\1\0\2\12\1\140"+
    "\20\12\2\0\2\12\10\0\1\12\10\0\1\12\4\0"+
    "\1\12\1\0\5\12\1\141\15\12\2\0\2\12\10\0"+
    "\1\12\10\0\1\12\4\0\1\12\1\0\13\12\1\142"+
    "\7\12\2\0\2\12\10\0\1\12\10\0\1\12\4\0"+
    "\1\12\1\0\6\12\1\143\14\12\2\0\2\12\10\0"+
    "\1\12\10\0\1\12\4\0\1\12\1\0\20\12\1\144"+
    "\2\12\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2726];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\10\2\11\2\1\1\11\2\1\7\11\2\1"+
    "\1\11\17\1\6\11\1\0\1\11\1\0\3\11\17\1"+
    "\5\11\41\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
StringBuffer stringBuffer = new StringBuffer();
StringBuffer intBuffer = new StringBuffer();

public static void main(String[] args) throws FileNotFoundException, IOException{
            FileReader yyin = new FileReader(args[0]);
            Yylex yy = new Yylex(yyin);
            Yytoken t;
            while ((t = yy.yylex()) != null)
                System.out.println(t.type);
            System.out.println("VALID");
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case STRING: {
              throw new Error("ERROR: String Error EOF");
            }  // fall though
            case 101: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Illegal character <"+
                                                yytext()+">");
            }
            // fall through
          case 50: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 51: break;
          case 3:
            { return new Yytoken("NOT");
            }
            // fall through
          case 52: break;
          case 4:
            { stringBuffer.setLength(0);
    yybegin(STRING);
    stringBuffer.toString();
    stringBuffer.append( yytext() );
            }
            // fall through
          case 53: break;
          case 5:
            { return new Yytoken("IDENTIFIER");
            }
            // fall through
          case 54: break;
          case 6:
            { return new Yytoken("LEFTPAREN");
            }
            // fall through
          case 55: break;
          case 7:
            { return new Yytoken("RIGHTPAREN");
            }
            // fall through
          case 56: break;
          case 8:
            { return new Yytoken("MULT");
            }
            // fall through
          case 57: break;
          case 9:
            { return new Yytoken("PLUS");
            }
            // fall through
          case 58: break;
          case 10:
            { return new Yytoken("COMMA");
            }
            // fall through
          case 59: break;
          case 11:
            { return new Yytoken("MINUS");
            }
            // fall through
          case 60: break;
          case 12:
            { return new Yytoken("ATTRIBUTE");
            }
            // fall through
          case 61: break;
          case 13:
            { return new Yytoken("DIVIDE");
            }
            // fall through
          case 62: break;
          case 14:
            { return new Yytoken("INTEGER");
            }
            // fall through
          case 63: break;
          case 15:
            { return new Yytoken("SEMICOLON");
            }
            // fall through
          case 64: break;
          case 16:
            { return new Yytoken("LESSTHAN");
            }
            // fall through
          case 65: break;
          case 17:
            { return new Yytoken("EQ");
            }
            // fall through
          case 66: break;
          case 18:
            { return new Yytoken("GREATERTHAN");
            }
            // fall through
          case 67: break;
          case 19:
            { return new Yytoken("RBRACKET");
            }
            // fall through
          case 68: break;
          case 20:
            { return new Yytoken("LBRACKET");
            }
            // fall through
          case 69: break;
          case 21:
            { throw new Error("String Error Null Character");
            }
            // fall through
          case 70: break;
          case 22:
            { yybegin(YYINITIAL);
    throw new Error("ERRORString Error NewLine");
            }
            // fall through
          case 71: break;
          case 23:
            { yybegin(YYINITIAL);
    stringBuffer.append( yytext() );
    return new Yytoken("String " + stringBuffer.toString());
            }
            // fall through
          case 72: break;
          case 24:
            { stringBuffer.append( yytext() );
            }
            // fall through
          case 73: break;
          case 25:
            { return new Yytoken("NOTEQ");
            }
            // fall through
          case 74: break;
          case 26:
            { return new Yytoken("LESSTHANOREQ");
            }
            // fall through
          case 75: break;
          case 27:
            { return new Yytoken("DOUBLEEQ");
            }
            // fall through
          case 76: break;
          case 28:
            { return new Yytoken("GREATERTHANOREQ");
            }
            // fall through
          case 77: break;
          case 29:
            { return new Yytoken("IF");
            }
            // fall through
          case 78: break;
          case 30:
            { return new Yytoken("OR");
            }
            // fall through
          case 79: break;
          case 31:
            { stringBuffer.append('\t');
            }
            // fall through
          case 80: break;
          case 32:
            { stringBuffer.append('\n');
            }
            // fall through
          case 81: break;
          case 33:
            { stringBuffer.append('\r');
            }
            // fall through
          case 82: break;
          case 34:
            { throw new Error("ERROR No Escape Characters");
            }
            // fall through
          case 83: break;
          case 35:
            { return new Yytoken("COMMENT");
            }
            // fall through
          case 84: break;
          case 36:
            { return new Yytoken("AND");
            }
            // fall through
          case 85: break;
          case 37:
            { return new Yytoken("FOR");
            }
            // fall through
          case 86: break;
          case 38:
            { return new Yytoken("INT");
            }
            // fall through
          case 87: break;
          case 39:
            { return new Yytoken("MOD");
            }
            // fall through
          case 88: break;
          case 40:
            { return new Yytoken("BOOL");
            }
            // fall through
          case 89: break;
          case 41:
            { return new Yytoken("ELSE");
            }
            // fall through
          case 90: break;
          case 42:
            { return new Yytoken("THEN");
            }
            // fall through
          case 91: break;
          case 43:
            { return new Yytoken("TRUE");
            }
            // fall through
          case 92: break;
          case 44:
            { return new Yytoken("VOID");
            }
            // fall through
          case 93: break;
          case 45:
            { return new Yytoken("FALSE");
            }
            // fall through
          case 94: break;
          case 46:
            { return new Yytoken("PRINTF");
            }
            // fall through
          case 95: break;
          case 47:
            { return new Yytoken("RETURN");
            }
            // fall through
          case 96: break;
          case 48:
            { return new Yytoken("STRING");
            }
            // fall through
          case 97: break;
          case 49:
            { return new Yytoken("STRUCT");
            }
            // fall through
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

import java.io.FileReader;
import java.io.FileNotFoundException;
import java.io.IOException;

class Yytoken {
  public String type;
  public Object value;
  public Int size;                                        //added this public value
  public Yytoken(String type) {
    this.type = type;
  }
  public Yytoken(String type, Object value) {
    this.type = type;
    this.value = value;
  }
 
  public Yytoken(String type, Object value, Int size){    //added this to the class to potentially have the size be the 16 bit part??
    this.type = type;
    this.value = value;
    this.size = size;

  }
}

%%

%unicode

%{
StringBuffer stringBuffer = new StringBuffer();

public static void main(String[] args) throws FileNotFoundException, IOException{
            FileReader yyin = new FileReader(args[0]);
            Yylex yy = new Yylex(yyin);
            Yytoken t;
            while ((t = yy.yylex()) != null)
                System.out.println(t.type);
            System.out.println("VALID");
}
%}

LineTerminator = \r|\n|\r\n
Digit = [0-9]
InputCharacter = [^\r\n]
WhiteSpace     = {LineTerminator} | [ \t\f]
Identifier = [:jletter:] [:jletterdigit:]*
Integer = [-|+]?[0-9]*
Comment = {SlashComment} | {HashComment}
SlashComment = "//" {InputCharacter}* {LineTerminator}
HashComment = "##" {InputCharacter}* {LineTerminator}
%state STRING
%state INTEGER

%%
/*keywords*/
<YYINITIAL>
"bool" { return new Yytoken("BOOL"); }
"int" { return new Yytoken("INT"); }
"true" { return new Yytoken("TRUE"); }
"false" { return new Yytoken("FALSE"); }
"void" { return new Yytoken("VOID"); }
"printf" { return new Yytoken("PRINTF"); }
"string" { return new Yytoken("STRING"); }
"struct" { return new Yytoken("STRUCT"); }
"if" { return new Yytoken("IF"); }
"then" { return new Yytoken("THEN"); }
"else" { return new Yytoken("ELSE"); }
"for" { return new Yytoken("FOR"); }
"return" { return new Yytoken("RETURN"); }


<YYINITIAL> {
/* identifiers */
{Identifier}                   { return new Yytoken("IDENTIFIER"); }

/* literals */
\"                             { stringBuffer.setLength(0); yybegin(STRING); }

/* symbols */
"{"                            { return new Yytoken("RBRACKET"); }
"}"                            { return new Yytoken("LBRACKET"); }
";"                            { return new Yytoken("SEMICOLON"); }
"<"                            { return new Yytoken("LESSTHAN"); }
">"                            { return new Yytoken("GREATERTHAN"); }
"=="                           { return new Yytoken("DOUBLEEQ"); }
"<="                           { return new Yytoken("LESSTHANOREQ"); }
">="                           { return new Yytoken("GREATERTHANOREQ"); }
"!="                           { return new Yytoken("NOTEQ"); }
"!"                            { return new Yytoken("NOT"); }
"("                            { return new Yytoken("LEFTPAREN"); }
")"                            { return new Yytoken("RIGHTPAREN"); }
"+"                            { return new Yytoken("PLUS"); }
"-"                            { return new Yytoken("MINUS"); }
"*"                            { return new Yytoken("MULT"); }
"="                            { return new Yytoken("EQ"); }

/* whitespace */
{WhiteSpace}                   { /* ignore */ }
/* comment */
{Comment}                      { return new Yytoken("COMMENT"); }
/*Integer*/
{Integer}                      { return new Yytoken("INTEGER"); }
}

<STRING> {
\"                             { yybegin(YYINITIAL);
                               return new Yytoken("STRING_LITERAL",
                               stringBuffer.toString()); }
[^\n\r\"\\]+                   { stringBuffer.append( yytext() ); }
\\t                            { stringBuffer.append('\t'); }
\\n                            { stringBuffer.append('\n'); }

\\r                            { stringBuffer.append('\r'); }
\\\"                           { stringBuffer.append('\"'); }
\\                             { stringBuffer.append('\\'); }
}

<INTEGER> {
{Digit}                        { yybegin(YYINITIAL);
                               return new Yytoken("Integer_LITERAL",
                               stringBuffer.toString()); }
{Digit}                        { stringBuffer.append( yytext() ); }
}

    
    
/* error fallback */
[^]                              { throw new Error("Illegal character <"+
                                                yytext()+">"); }

